************************Replication Controller********************************
With the help of Replication we can monitor the pod, whether the pod is running or not.
Compares the current state with the desired state, if there are two many pods the ReplicationController terminates the extra pods. If there are too few, the ReplicationController starts more pods.

Master
sudo su
kubectl get nodes
kubectl get pods
kubectl delete pods --all
mkdir rc
cd rc/
vi rc.yaml
****************************************************************************apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx-rc
spec:
  replicas: 3
  template:
    metadata:
      name: nginx-pod
      labels:
        app: nginx-app
    spec:
      containers:
      - name: nginx-container
        image: nginx
        ports:
        - containerPort: 80
  selector:
    app: nginx-app     #ReplicaitonController will keep monitoring pods with this label
***************************************************************************
kubectl get rc
kubectl apply -f rc.yaml
kubectl get rc
kubectl get pods
kkubectl get pods -o wide

Master (duplicate tab)
kubectl get pods --watch

Master
kuberctl delete pod <pod name>
kubectl get pods -o wide
kubectl run pod1 --image=nginx
kubectl get pods
kubectl get pods -l app=nginx-app
kubectl get rc -l app=nginx-app
kubectl scale rc nginx-rc --replicas=5  #scaling up rc pods
kubectl get rc -l app=nginx-app
kubectl get pods  
kubectl scale rc nginx-rc --replicas=3 #scaling down #rc pods which are created in the end get deleted #LIFO
kubectl get pods
kubectl delete rc nginx-rc #all the rc pods will get deleted
kubectl get pods


*****************************ReplicaSet************************************
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
cd ..
mkdir rs
cd rs
vi rs.yaml
***************************************************************************
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx-rs
spec:
  replicas: 3
  template:
    metadata:
      name: nginx-pod
      labels:
        app: nginx-app
        tier: frontend
    spec:
      containers:
      - name: nginx-container
        image: nginx
        ports:
        - containerPort: 80
  selector:
    matchLabels:
      app: nginx-app
    matchExpressions:
      - {key: tier, operator: In, values: [frontend]}
***************************************************************************
kubectl get rs
kubectl appky -f rs.yaml
kubectl get rs
kubectl get po
kubectl get po -l app=nginx-app
kubectl get po -l 'tier in (frontend)'
kubectl scale rs nginx-rs --replicas=5
kubectl get po
kubectl get rs
kubectl felete -f rs.yaml
kubectl get pods
**************************************************************************
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
RollingUpdateStrategy: We can define how many pods that will be unavailable during the update so it can replicate the pods in there absence. There will be no down time.
This process is deployment it uses replication set for this purpose.
Blue-Green process where blue means older version and green means new version.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * * * * * * * * *  * * * *
Master
cd ..
mkdir deploy
cd deploy/
vi deploy.yaml
***************************************************************************
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
  labels:
    app: nginx-app
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: nginx-app
    spec:
      containers:
      - name: nginx-container
        image: nginx:1.7.9
        ports:
        - containerPort: 80
  selector:
    matchLabels:
      app: nginx-app
***************************************************************************
kubectl create -f deploy.yaml
kubectl get all
kubectl describe deploy nginx-deploy
#Trying to update with an image which doesn't exist:
kubectl set image deploy nginx-deploy nginx-container=nginx:1.91 --record
kubectl get all
kubectl describe deploy nginx-deploy #There will be an error
kubectl rollout status deployment/nginx-deploy
kubectl rollout history deployment/nginx-deploy
kubectl rollout undo deployment/nginx-deploy  #To undo the deployment process
kubectl get all

#Updating using a correct image:
kubectl set image deploy nginx-deploy nginx-container=nginx:1.9.1
kubectl get all
kubectl describe deploy nginx-deploy
#scaling up the deployment
kubectl scale deployment nginx-deploy --replicas=5
kubectl get deploy
kubectl get po -o wide
kubectl delete deploy nginx-deploy
kubectl get deploy

***************************************************************************
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Kubernetes-Services
#when new pods get created in place of old one they have a new IP address
#pods have dynamic IP address
#Service have a load balancer concept in-built
#There is a service layer which have static IP address and pods adre considered as endpoints of it. Through this service layer client access the application.
#There mainly three type of services:
1. Cluster IP service: Internal to cluster (Like: To access the database)
2. NodePort service: External to cluster, Port forwarding(mapping service port to cluster)(Port number which is to be open on your cluster level b/w 30k-32767)(Like: To access web application)
Target Port: container port(like: nginx is running on the container it will have the port 80)
service port: which port of the service we have mapped to the target port that is the service port. Service Port number mapped to target port
Nodeport: service port?cluster port is mapped to nodeport service
3. Load balancer service: Suitable for External load balancer/cloud based service

Master

kubectl get all
kubectl delete pod1
cd ..
kubectl get svc
mkdir svc
cd svc/
vi deploy.yaml
vi deploy.yaml
***************************************************************************
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
  labels:
    app: nginx-app
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: nginx-app
    spec:
      containers:
      - name: nginx-container
        image: nginx:1.7.9
        ports:
        - containerPort: 80
  selector:
    matchLabels:
      app: nginx-app
***************************************************************************
kubectk create -f deploy.yaml
kubectl get all
vi np.yaml #creating Nodeport service using script
***************************************************************************
apiVersion: v1
kind: Service	
metadata:
  name: my-service
  labels:
    app: nginx-app
spec:
  selector:
    app: nginx-app
  type: NodePort
  ports:
  - nodePort: 31111
    port: 80
    targetPort: 80
***************************************************************************
kubectl create -f np.yaml
kubectl get svc
#copy IP address of any node either master or worker node: <IP:31111> paste it into the browser
curl <IPaddress of service> #curl command returns the http response
kubectl describe svc my-service
kubectl get pods -o wide #It will show the IP address of the pods as endpoints which have been taking cared by the service 

*********************Creating Cluster IP service*******************************
kubectl delete svc my-service
vi ci.yaml
***************************************************************************
apiVersion: v1
kind: Service	
metadata:
  name: my-service
  labels:
    app: nginx-app
spec:
  selector:
    app: nginx-app
  type: ClusterIP
  ports:
    port: 80
    targetPort: 80
***************************************************************************
kubectl create -f ci.yaml
kubectl get svc

**********************Creating the load balancer service***********************
kubectl delete svc my-service
vi lb.yaml
***************************************************************************
apiVersion: v1
kind: Service	
metadata:
  name: my-service
  labels:
    app: nginx-app
spec:
  selector:
    app: nginx-app
  type: LoadBalancer
  ports:
  - nodePort: 31000
    port: 80
    targetPort: 80
***************************************************************************
#Loadbalancer service is most suitable for the EKS(Elastic kubernetes service)type of cluster
kubectl create -f lb.yaml
kubectl get svc #An external IP address will get created
kubectl delete svc my-service

****************************INGRESS Service******************************
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.35.0/deploy/static/provider/baremetal/deploy.yaml
kubectl get ns #ns namespace
kubectl get svc -n ingress-nginx #copy number return with port 80:_____ which is return in the same line as Type:Nodeport
kubectl run nginx --image=nginx
kubectl run tomcat --image=tomcat
kubectl expose pod nginx --type=ClusterIP --port=80
kubectl expose pod tomcat --type=ClusterIP --port=8080
kubectl get svc
kubectl get pods
kubectl delete deploy --all
kubectl get pods
kubectl get svc
vi ingress.yaml
**************************************************************************
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: simple-fanout-example
  annotations:
   nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
     paths:
     - path: /nginx
       backend:
        serviceName: nginx
        servicePort: 80
***************************************************************************
kubectl create -f ingress.yaml
kubectl get ingress
vi ingress.yaml
kubectl apply -f ingress.yaml
***********************Adding Tomcat***************************************
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: simple-fanout-example
  annotations:
   nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
     paths:
     - path: /nginx
       backend:
        serviceName: nginx
        servicePort: 80
     - path: /abc
       backend:
        serviceName: tomcat
        servicePort: 80
***************************************************************************
#copy Ipaddress of any node{ <IPaddress>:______/abc } paste this into the browser





































 















































